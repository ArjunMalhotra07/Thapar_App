name: Build, Upload APK to GCS and Send Link

on:
  workflow_dispatch:

jobs:
  build-upload-send:
    runs-on: ubuntu-latest

    steps:
      # Checkout your repo
      - name: Checkout code
        uses: actions/checkout@v4

      # Setup Flutter
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.22.2'

      # Build the release APK
      - name: Build APK
        run: flutter build apk --release

      # Setup Node.js to use GCS and Nodemailer
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: |
          npm init -y
          npm install @google-cloud/storage nodemailer

      # Upload APK to Google Cloud Storage
      - name: Upload to GCS
        run: |
          echo '${{ secrets.GCP_SA_KEY }}' > sa.json
          APK_PATH=build/app/outputs/flutter-apk/app-release.apk
          UPLOAD_NAME=app-release-$(date +%s).apk

          node <<'EOF'
          const { Storage } = require('@google-cloud/storage');
          const fs = require('fs');
          const path = require('path');
          const storage = new Storage({ keyFilename: 'sa.json' });
          const bucketName = 'thapar-app-apk-uploads-bucket';  // change if needed

          (async () => {
            const [buckets] = await storage.getBuckets();
            if (!buckets.find(b => b.name === bucketName)) {
              await storage.createBucket(bucketName);
            }

            const uploadName = `app-release-${Date.now()}.apk`;
            await storage.bucket(bucketName)
              .upload('build/app/outputs/flutter-apk/app-release.apk', {
                destination: uploadName,
                gzip: true
              });

            await storage.bucket(bucketName).file(uploadName).makePublic();

            const publicUrl = \`https://storage.googleapis.com/\${bucketName}/\${uploadName}\`;
            fs.writeFileSync('download_link.txt', publicUrl);
            console.log('âœ… Uploaded to: ' + publicUrl);
          })();
          EOF

      # Send email with the download link
      - name: Send email
        run: |
          DOWNLOAD_LINK=$(cat download_link.txt)

          node <<EOF
          const nodemailer = require('nodemailer');
          const transporter = nodemailer.createTransport({
            service: 'gmail',
            auth: {
              user: '${{ secrets.EMAIL_USER }}',
              pass: '${{ secrets.EMAIL_PASS }}'
            }
          });

          const mailOptions = {
            from: '${{ secrets.EMAIL_USER }}',
            to: '${{ secrets.EMAIL_TO }}',
            subject: 'New APK Build Available',
            text: 'Download the latest APK here: ' + process.env.DOWNLOAD_LINK
          };

          transporter.sendMail(mailOptions, function(error, info){
            if (error) {
              console.error(error);
              process.exit(1);
            } else {
              console.log('ðŸ“§ Email sent: ' + info.response);
            }
          });
          EOF
        env:
          DOWNLOAD_LINK: ${{ steps.upload.outputs.link }}
